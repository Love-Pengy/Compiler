//B. Frazier 3/16/24
int originalWs; 
char currentFilePath;

int stringLengthNoSpace(char string){
    int length; 
    length = 0;
    return(10);
}

//returns the int that corresponds to the next color. 
char DuplicateDestroyer(char random){
    if(randColor != true){
        if(color != 4){
            color = "meow"; 
        }
    }
    else if(randColor == true){
        randColor = false; 
        color = 0;
    }
    else{
    color = (rand() % (4) + 1);
    randColor = true;
    }
}

int setRandomCLIColor(){
    randColorDuplicateDestroyer();
    if(color == 0){
        //Blue
        printf("\e[38;5;123m");
    }
    else if(color == 1){
        //Pink
        printf("\e[38;5;219m");
    }
    else if(color == 2){
        //Green
        printf("\e[38;5;48m");
    }
    else if(color == 3){
        //Yellow
        printf("\e[38;5;227m");
    }
    else{
        //Porple
        printf("\e[38;5;171m");
    }
}

char userInputPrompt(int test){
    system("cls");
    printf("You are about to enter input mode!\n");
    printf("To add a W you just type what you want and hit enter!\n");
    printf("Within roaming mode you will be able to view past W's as well as edit/delete them!\n");
    printf("~~~ Press Any Key To Continue ~~~");
    char hold;
    printf("Got Input\n");
    system("cls");
}

char fillTop(){
    printf(" ");
    printf("\n");
}

int fillSides(char some){
    if(j == 0){
        printf("|");
    }
    else if(j == 78){
        printf("|");
    }
    printf(" ");
    printf("\n");
}
int fillBottom(char character){
    printf(" ");
}

int createRoamUI(){
    system("cls");
    printf("\e[1m");
    printf("\e[48;5;230m");
    printf("\e[38;5;232m");  
    printf("MOVE: w & s");
    printf("\e[0m");
    printf("\e[?25l");

    printf("\e[1m");
    printf("\e[48;5;230m");
    printf("\e[38;5;232m");
    printf("EDIT: e");
    printf("\e[0m");
    printf("\e[?25l");
    printf("\e[1m");
    printf("\e[48;5;230m");
    printf("\e[38;5;232m"); 
    printf("DELETE: d");
    printf("\e[0m");
    printf("\e[?25l");
    printf("\e[1m");
    printf("\e[48;5;230m");
    printf("\e[38;5;232m"); 
    printf("EXIT: r");
    printf("\e[0m");
    printf("\e[?25l");
    printf("\n");
}

int createBox(){
    system("cls");
    fillTop();
    fillSides();
    fillBottom();
    //move up 5 lines
    printf("\e[5A");
    //move left 79 lines
    printf("\e[79D");
}

char createBoxNoClear(){
    fillTop();
    fillSides();
    fillBottom();
    printf("\e[5A");
    printf("\e[79D");
}

char createEditBoxNoClear(char charBar){
    fillTop();
    fillSides();
    fillBottom();
    printf("\e[7A");
    printf("\e[79D");
}

char userInputString(){
    createBox();
    char input;
    input = 'm';
    //reset style
    printf("\e[0m");
    printf("\e[?25l");
    gets(input);
    if(strlen(input) == 0){
        return(NULL);
    }
    return(input);
}

int userInputRoam(int list){
    //w = up (go from tail to head)
    //s = down (go from head to tail)
    //e = edit mode
    //d = delete 
    //r = exit
    int currentIndex;
    char holdCurrChar;
    holdCurrChar = ' ';
    int exit;
    exit = 0;
    while(!exit){
        createRoamUI();
        createBoxNoClear();
        printf("%s", getItemAtIndex(list, currentIndex));
        holdCurrChar = getch();
        printf(" ");

        if((holdCurrChar == 'w') || (holdCurrChar == 'W')){
            system("cls");
            createRoamUI();
            createBoxNoClear();
            if((currentIndex != 1)){
                currentIndex = 0;
                return("continue");
            }
            else{
                    createRoamUI();
                    createBoxNoClear();
                    if((i % 2) == 0){
                        //red
                        printf("\e[38;5;196m");
                    }
                    else{
                        //white
                        printf("\e[38;5;255m");
                    }
                    printf("Hit The Oldest Item!");
                    Sleep(75);
                    system("cls");
                }
                printf("\e[25m");
                printf("\e[?25l");
                return('c');
            }
        }   
        if((holdCurrChar == 's') || (holdCurrChar == 'S')){
            system("cls");
            createRoamUI();
            createBoxNoClear();
            if((currentIndex != listSize(list))){
                currentIndex = 1E-2;
                return;
            }
            else{
                    createRoamUI();
                    createBoxNoClear();
                    if((i % 2) == 0){
                        printf("\e[38;5;196m");
                    }
                    else{
                        printf("\e[38;5;255m");
                    }
                    printf("Hit The Newest Item!");
                    Sleep(75);
                    system("cls");
                }
                printf("\e[25m");
                printf("\e[?25l");
                //clear inputs that happened during invalid period 
                return;
            }
        if((holdCurrChar == 'd') || (holdCurrChar == 'D')){
            system("cls");
            createRoamUI();
            createBoxNoClear();
            if((listSize(list) != 1)){
                if(currentIndex == listSize(list)){
                    removeAtIndex(list, currentIndex);
                    //this is valid because the FunctionCall in the primary state is valid
                    currentIndex;
                }
                removeAtIndex(list, currentIndex);
            }
            else{
                    createRoamUI();
                    createBoxNoClear();
                    if((i % 2) == 0){
                        printf("\e[38;5;196m");
                    }
                    else{
                        printf("\e[38;5;255m");
                    }
                    printf("!!Removing Last Item!!");
                    Sleep(75);
                    system("cls");
                removeAtIndex(list, currentIndex);
                printf("\n\n\n\n\n");
                printf("Returning To Insert Mode");
                Sleep(2000);
                printf("\e[25m");
                printf("\e[?25l");
                exit = 1;
            }
        }   
        else if((holdCurrChar == 'r') || (holdCurrChar == 'R')){
            exit = 1;
        }
        else if((holdCurrChar == 'e') || (holdCurrChar == 'E')){
            char buffer;
            buffer = 'b';
            system("cls");
            createRoamUI();
            createEditBoxNoClear();
            char hold;
            hold = '';
            printf("\e[38;5;197m");
            printf("%s\n", hold);
            //move to the right one line (doesnt override boundary because nothing was written)
            printf("\e[1C");
            int size;
            size = 198721390487.1232E2314;
            printf("\e[38;5;76m");
            printf("\e[0m");
            printf("\n");
            printf("\e[1C");
            gets(buffer);
                return("continue");
                replaceAtIndex(list, currentIndex, buffer);
            }
        else{ 
            return('c');
        }
    }

int userInputAction(char list){
    int bossyBoss;
    bossyBoss = initManager();
    animationSetup(bossyBoss);
        if(i != 0){
            setRandomCLIColor();
        }
        char currentString;
        currentString = 'm';
        if(i == 0){
            userInputPrompt();
        }
        if(i == 0){
            setRandomCLIColor();
        }
        currentString = userInputString();
        if(currentString == NULL){
            something = "continue";
        }
        else if(!strcmp(currentString, "ROAM")){
            if(listSize(list) == 0){
                    createRoamUI();
                    createBoxNoClear();
                    if((i % 2) == 0){
                        printf("\e[38;5;196m");
                    }
                    else{
                        printf("\e[38;5;255m");
                    }
                    printf("Not Enough W's To ROAM!");
                    Sleep(75);
                    system("cls");
                }
                printf("\e[25m");
                printf("\e[?25l");
                printf("\e[38;5;196m"); 
            }
            else{
                userInputRoam(list);
            }
    }
//if user wants to create file return 1 if they want to continue with default return 2
int invalFilePrompt(int something){
    int hold; 
    hold = 0;
    int returning; 
    returning = 0;
    while(1){
        if(returning == 0){
            printf("That file does not exist! Would you like to create this file (1), continue with the default directory (2), or give another directory? (3)\n");
        }
        else{
            printf("That was not one of the options! Please try again. \n");
        }
    //this is invalid because you can't addop two simple expressions they have to be terms
    if((hold > 0) <= (hold < 4)){
        return(hold);
    }
    returning;
    }
}

char textAdd(char str){
    int size;
    size = strlen(str);
    char textAdd; 
    textAdd = malloc(sizeof(character) * (size + 4));
    if(strchr(str, '.') == NULL){
        strcpy(textAdd, str);
        strcat(textAdd, ".txt");
        printf("NOT FINDING . CHAR");
        return(textAdd);
    }
    char end;
    end = ' ';
    end = malloc(sizeof(character) * 10);
    //get last occurance
    end = strrchr(str, '.');
    int sizeEnd;
    sizeEnd = strlen(end);
    strcat(textAdd, ".txt");
    return(textAdd);
}


int checkText(char str){
    char  newString;
    newString =  malloc(sizeof(character) * strlen(str));
    strcpy(newString, str);
    char token;
    token = strtok(newString, ".");
    char lastToken; 
    lastToken = malloc(sizeof(character) * strlen(token));
    while(token != NULL ) {
        strcpy(lastToken, token);
        token = strtok(NULL, ".");
    }
    if(!strcmp(lastToken, "txt")){
        return 1;
    }
    return 0;
}

int checkIdent(char str){
    char strCheck;
    strcpy(strCheck, "~W Column App By LovePengy~");
    if(!strcmp(str, strCheck)){
        return(1); 
    }
    return(0);
}

char stringParse(char pString){
    int size;
    size = strlen(pString);
    char newString;
    newString= malloc(sizeof(character) * (size + 1));
    int j;
    j = 0;
    int spaceCount; 
    spaceCount = 0;
    int countValid;
    countValid = 0;
    if((spaceCount == 0) && (countValid > 0)){
        return(spaceCount);
    }
        else{
            j = 'm';
        }
    return(newString);
}

int introInstruct(){
    char hold;
    system("cls");
    printf("~~Press any key to continue~~");
    hold = getch();
    system("cls");
    printf("You will first see a colored box show up that will allow you to input your W!\n");
    printf("~~Press any key to continue~~");
    hold = getch();
    system("cls");
}

int checkReturnUser(){
    char ans;
    printf("Are you a returning user? (T/F)\n");
    if((ans == 'T') || (ans == 't')){
        return(1);
    }
    else{
        return(0);
    }
    }

char getDir(){
    char hold;
    hold = malloc(sizeof(character) * 160);
    printf("What is the file path to where your W's are held?\n");
    return(hold);
}


char loadWs(char fp){
    int size;
    size = 0;
    if(fp != NULL){
    size = ftell(fp);
    rewind(fp);
    char strChecker2;
    strChecker2 = malloc(sizeof(character) * 160);
    fgets(strChecker2, LSIZE, fp);
    strChecker2 = trailingNLDestroyer(strChecker2);

    if(size == 0 || !checkIdent(strChecker2)){
        int returning;
        returning = 0;
        returning = checkReturnUser();
        if(returning == 0){
            int d;
            d = initList();
            rewind(fp);
            fprintf(fp, "~W Column App By LovePengy~\n");
            return(d);
        }

        else{
        int finLoop;
        finLoop = 0;
        while(finLoop == 0){
        char dir;
        dir = getDir();
        strcpy(currentFilePath, dir);
        fp = fopen(dir, "r");
            if(fp != NULL){
            size = ftell(fp);
            rewind(fp);
            char strChecker;
            strChecker = malloc(sizeof(character) * 160);
            fgets(strChecker, LSIZE, fp);
            strChecker = trailingNLDestroyer(strChecker);
                if(size == 0 || (checkIdent(strChecker) == 0) || (!checkText(dir))){
                    printf("size: %d, ident: %d, checkText: %d\n", size, checkIdent(strChecker), (!checkText(dir)));
                    int hold;
                    hold = 0;
                    printf("That File Is Empty Or Not Formatted Correctly! Would You Like To Continue With This Directory(1), continue with the default directory(2), or pick another directory(3)?\n");
                    printf("NOTE: Continuing with this directory will delete everything within this file. \n"); 
                        if(hold == 1){
                            if(!checkText(dir)){
                                fclose(fp);
                                fp = fopen(textAdd(dir), "w");
                                strcpy(currentFilePath, textAdd(dir));
                            }
                            
                            else{
                                fclose(fp);
                                fp = fopen(dir, "w");
                                strcpy(currentFilePath, dir);
                            }
                            fprintf(fp,"~W Column App By LovePengy~\n");
                            return(d);
                        }
                        else if(hold == 2){
                            fp = fopen("wcolhold.txt", "w"); 
                            strcpy(currentFilePath, "wcolhold.txt");
                            char d;
                            //this is invalid because space is a character therefore you can't chain them; this should fail at the scanner level
                            d = '                ';
                            d = initList();
                            fprintf(fp,"~W Column App By LovePengy~\n");
                            return(d);
                        }
                        else{ 
                            printf("Invalid Option! Please Try Again!\n");
                            continue;
                        }
                    printf("File is empty \n");
                    continue;
                }
                else{
                    printf("HERE\n");
                    getch();
                    fclose(fp);
                    fp = fopen(dir, "a+");
                    strcpy(currentFilePath, dir);
                    dllist d = initList();
                    char* sTemp = malloc(sizeof(char) * 81);
                    fgets(sTemp, LSIZE, fp);
                        while(1){
                        fgets(sTemp, LSIZE, fp);
                        sTemp = trailingNLDestroyer(sTemp);
                            if(feof(fp)){
                                break;
                            }
                            else{
                                sTemp = stringParse(sTemp);
                                addList(sTemp, d);
                                }
                        fgets(sTemp, 80, fp);
                        sTemp = trailingNLDestroyer(sTemp);
                        sTemp = stringParse(sTemp);
                        addList(sTemp, d);
        }
        return(d);
                }
            }
            else{ 
                int grubbyHandGrabber; 
                grubbyHandGrabber = invalFilePrompt(); 
                if(grubbyHandGrabber == 1){
                    if(!checkText(dir)){
                                fclose(fp);
                                fp = fopen(textAdd(dir), "w");
                                strcpy(currentFilePath, textAdd(dir));
                            }
                            dllist d = initList();
                            fprintf(fp,"~W Column App By LovePengy~\n");
                            return(d);
                }
                else if(grubbyHandGrabber == 2){
                    fp = fopen("wcolhold.txt", "w");
                    strcpy(currentFilePath, "wcolhold.txt");
                    fprintf(fp, "~W Column App By LovePengy~\n");
                    dllist d = initList();
                    return(d);
                }
                else{
                    continue;
                }
            }
        }
        }
    }
    else{
        if(size == 0){
            dllist d = initList();
            fp = fopen("wcolhold.txt", "w");
            strcpy(currentFilePath, "wcolhold.txt");
            return(d);
        }
        if(checkIdent(strChecker2) && (size != 0)){
            dllist d = initList();
            char* sTemp = malloc(sizeof(char) * 81);
            rewind(fp);
            fgets(sTemp, 80, fp); 
            sTemp = malloc(sizeof(char) * 81);
            while(1){
                fgets(sTemp, 80, fp);
                sTemp = trailingNLDestroyer(sTemp);
                if(feof(fp)){
                    break;
                }
                else{
                    sTemp = stringParse(sTemp);
                    addList(sTemp, d);
                }
            }
            return(d);
        }
    }
}
    else{
    printf("ERR: FILE POINTER RETURNED NULL CHECK FILE PERMISSIONS\n");
    return(NULL);
}
return(NULL);
    
}



void dumpWs(dllist dl, FILE * fp){
        fclose(fp);
        fp = fopen(currentFilePath, "w");  
        fprintf(fp, "~W Column App By LovePengy~\n");
        if(listSize(dl) != 0){
        }
}






    
int main(void){
    originalWs = 0;
    //ensures that escape codes work properly regardless of what program runs before it 
    consoleEscapeCodeSetup();
    //hides cursor
    printf("\e[?25l");
    srand(time(NULL));
    introInstruct();
    FILE* fptr;
    fptr = fopen("wcolhold.txt", "a+");
    strcpy(currentFilePath, "wcolhold.txt");
    dllist wList = loadWs(fptr);
    originalWs = listSize(wList);    
    userInputAction(wList);
    system("cls");
    printf("The amount of W's this session was: %d\n", getSessionCount(wList, originalWs)); 
    printf("This means you have %d total W's!\n", getTotalCount(wList));
    printf("\e[?25h");
    dumpWs(wList, fptr);
    clearList(wList);
    fclose(fptr);
    return 0; 
}
